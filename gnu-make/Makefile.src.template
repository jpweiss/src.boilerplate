# -*- Makefile -*-
# Copyright (C) 2006 by John P. Weiss
#
# This package is free software; you can redistribute it and/or modify
# it under the terms of the Artistic License, included as the file
# "LICENSE" in the source code archive.
#
# This package is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#
# You should have received a copy of the file "LICENSE", containing
# the License John Weiss originally placed this program under.
#
#
#T#
#T# This is a Makefile-template.  All comments beginning with "#T#" are
#T# documentation of the template itself.  You should remove them, along with
#T# any of the boilerplate they document, as you customize this file.
#T#
#
#
# RCS $Id$
##########
#
# Initial includes
#
##########


include make.vars.mk
include $(BASEDIR)/make.syscfg.mk


##########
#
# Source Variables
#
##########

DOXYGEN_CFG:=
DOXYGEN_CFG_TARG_DIR:=

# Archive basename.
TARPKG_NAME=mywhatever

# Executables
TARG_BINS:=ex why zee
TARG_LIB:=libmylib
TARG_COMMON_OBJS:=

# Standalone Headers or C headers.
HEADERS:=

# C files
CSRC:=

# C++ files
CXX_SRC:=foo.C bar.cc $(TARG_COMMON_OBJS:%.o=%.cc)

# Headerless C++ files.
CXX_SRC_NO_H:=
CXX_SRC_NO_H += $(TARG_BINS:%=%.cc)

#
# Auto-generated variables for objects and headers.  Must be included here,
# and no earlier.
# Defines the $(OBJS) variable, which contains a list of all object files.
#
include $(BASEDIR)/make.autogenV.mk


# GNU-make Macros; keep those that you need.
lastword = $(word $(words $(1)),$(1))
lastdir = $(call lastword,$(subst /, ,$(1)))
finder = $(shell find $(1) \( -path "*/CVS" -prune \) -o \! -type d -print)


##########
#
# Make Rules
#
##########


all:

#T# Edit accordingly:
build_all: $(TARG_BINS) $(TARG_LIB).a $(TARG_LIB).so

targ.exe: $(OBJS)
	$(CC) $(LDFLAGS) -o $@ $(OBJS) $(LIBS)

#T# GNU Make:
#T# One side effect of '=' is that you can do "LIBS= -leveryone $(CUSTLIBS)"
#T# and set CUSTLIBS later on, before calling the linker.  Using a
#T# target-specific assignment is one way to do this.
targ2.exe: LIBS += -lmylib

targ2.exe: $(OBJS)
	$(CXX) $(LDFLAGS) -o $@ $(OBJS) $(LIBS)

#T# GNU Make:
#T# Use a special builtin pattern rule.
#T# Change: s/OBJS_TARGLIB/OBJS/ when all of the objects are members of the
#T# library.
$(TARG_LIB).a: $(TARG_LIB).a($(OBJS_TARGLIB))
#	ranlib $@ #T# Uncomment this line if using a non-GNU "ar".

$(TARG_LIB).so: $(OBJS)
	$(CXX) $(LDFLAGS) -shared -fPIC -o $@ $(OBJS) $(LIBS)

#T# Multi-targ make example
#T# The  "targs : pattern : dep-patern" is a GNU-make special (called
#T# "static pattern rules").
$(TARG_BINS): % : %.o $(TARG_COMMON_OBJS)
	$(CXX) $(LDFLAGS) -o $@ $@.o $(TARG_COMMON_OBJS) $(LIBS)

#T# Build a list of objects.  Use this when splitting the *.o in a library
#T# across multiple subdirectories.
#T# Define these GNU-make Macros:
#T#   lastword = $(word $(words $(1)),$(1))
#T#   lastdir = $(call lastword,$(subst /, ,$(1)))
make.libobjsV.mk: $(SRC)
	echo "OBJS_TARGLIB += $(addprefix $(call lastdir,$(CURDIR))/,$(OBJS))" \
		> make.libobjsV.mk
#T# Then add:
#T#   OBJS_TARGLIB:=
#T#   -include subdir/make.libobjsV.mk
#T# ...to the parent Makefile.  You should also add this dependency rule:
#T#   subdir/make.libobjsV.mk:
#T#	  cd subdir && $(MAKE) make.libobjsV.mk


#
# Unit-Testing
#

#T# If your unit tests are inside of the source-subdir, use this:
test: utest
unit_test: utest
utest:
	cd utests; $(MAKE) all

#T# If this *IS* the unit tests subdir, use this:
run_utests: $(TARG_BINS)
	for b in $(TARG_BINS); do \
		case $$b in \
			/*) $$b; ;; \
			*)  ./$$b; ;; \
		esac; \
	done

#
# Profiling
#

#T# Remove if there's nothing to profile.
gcov: $(SRC)
	for f in $?; do \
		$(GCOV) $(GCOV_OPTS) $$f; \
	done

#
# Dependencies
#
include $(BASEDIR)/make.deprules.mk

#T# Manual Deps
#T# You should need these very, very rarely.
#$(SOME_OBJS): $($@:.o=.srcsuf)


# Cleanup
#
include $(BASEDIR)/make.cleanup.mk


# Installation rules.
#
include $(BASEDIR)/make.installrules.mk
#T# Remove the above if you're not installing anything, like in unit tests.

# Packaging
#
include $(BASEDIR)/make.tar_n_doc.mk
#T# Remove the above if you're not packaging anything.


#################
#
#  End
